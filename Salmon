#!/bin/sh -
#SBATCH --job-name=salmon_quant
#SBATCH --output=salmon_quant_%j.out
#SBATCH --error=salmon_quant_%j.err
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=64
#SBATCH --mem=128G
#SBATCH --time=48:00:00
#SBATCH --partition=compute

# https://bioinformatics-core-shared-training.github.io/Bulk_RNAseq_Course_Nov24/Bulk_RNAseq_Course_Base/Markdowns/02_FastQC_practical.html
# https://bioinformatics-core-shared-training.github.io/Bulk_RNAseq_Course_Nov24/Bulk_RNAseq_Course_Base/Markdowns/03_Quantification_with_Salmon_practical.html
species="Astatotilapia calliptera" # Reference genome species
conda_env="seq"
working_dir="." # "~/scratch/seq/"

if ! command -v conda &> /dev/null
then
    echo "conda is not installed. Please install Conda and rerun this script."
    exit 1
fi

conda run -n $conda_env salmon --help || conda create -n $conda_env --file requirements.txt -y

stages=("LG" "2C" "1K" "EG")
groups=("AC")
# File name example: AC_1K_rep1_EKRN220054961-1A_HLWCFDSX5_L1_1.fq.gz
fq_path=~/../cy293/cichlids/bulk_RNA_seq/input/unstranded/

mkdir -p ./fastq/
for stage in "${stages[@]}"; do
    for group in "${groups[@]}"; do
        fq_files=("${fq_path}""${group}"_"${stage}"_rep*)
        for file in "${fq_files[@]}"; do
            if [ ! -f ./fastq/$(basename "$file") ]; then
                cp "$file" ./fastq/
            fi
        done
    done
done

samples=()
for file in ./fastq/*; do
    filename=$(basename "$file")
    group=$(echo "$filename" | cut -d'_' -f1)
    stage=$(echo "$filename" | cut -d'_' -f2)
    replicate=$(echo "$filename" | cut -d'_' -f3 | cut -d'.' -f1)
    if [[ " ${groups[@]} " =~ " ${group} " ]] && [[ " ${stages[@]} " =~ " ${stage} " ]]; then
        sample="${group}_${stage}_${replicate}"
        if [[ ! " ${samples[@]} " =~ " ${sample} " ]]; then
            samples+=("$sample")
        fi
    fi
done
echo "Samples: ${samples[@]}"

mkdir -p ./genome/
cd ./genome/
species=$(echo "$species" | tr '[:upper:]' '[:lower:]' | tr ' ' '_')
genome=$(curl -s https://ftp.ensembl.org/pub/current_fasta/${species}/cdna/ | grep -o 'href="[^"]\+\.cdna\.all\.fa\.gz' | sed 's/^href="//' | sed 's/\.cdna\.all\.fa\.gz$//' | head -1)

if [ ! -f ${genome}.dna_sm.toplevel.fa.gz ]; then
    wget https://ftp.ensembl.org/pub/current_fasta/${species}/dna/${genome}.dna_sm.toplevel.fa.gz
fi
if [ ! -f ${genome}.cdna.all.fa.gz ]; then
    wget https://ftp.ensembl.org/pub/current_fasta/${species}/cdna/${genome}.cdna.all.fa.gz
fi
if [ ! -f ${genome}.fa.gz ]; then
    cat ${genome}.cdna.all.fa.gz ${genome}.dna_sm.toplevel.fa.gz > ${genome}.fa.gz
fi
if [ ! -f decoy.txt ]; then
    zcat ${genome}.dna_sm.toplevel.fa.gz | grep "^>" | cut -d " " -f 1 | sed 's/>//g' > decoy.txt
fi
mkdir -p ../script/
if [ ! -f ../script/create_refflat_from_sam_header.py ]; then
    wget https://raw.githubusercontent.com/crukci-bioinformatics/BamHeaderToRefflat/refs/heads/master/create_refflat_from_sam_header.py -O ../script/create_refflat_from_sam_header.py
fi
if [ ! -d ${genome}_index ]; then
    conda run -n $conda_env salmon index -t ${genome}.fa.gz -d decoy.txt -p 64 -i ${genome}_index
fi

mkdir -p ../output/
for sample in "${samples[@]}"; do
    group=$(echo "$sample" | cut -d'_' -f1)
    stage=$(echo "$sample" | cut -d'_' -f2)
    replicate=$(echo "$sample" | cut -d'_' -f3)

    output_dir="../output/${group}_${stage}_${replicate}"
    mkdir -p "$output_dir"

    fastqc_report="${output_dir}/${group}_${stage}_${replicate}_fastqc.html"
    if [ ! -f "$fastqc_report" ]; then
        conda run -n $conda_env fastqc -o "$output_dir" \
            "../fastq/${group}_${stage}_${replicate}_*_1.fq.gz" \
            "../fastq/${group}_${stage}_${replicate}_*_2.fq.gz"
    fi

    if [ ! -d "${output_dir}" ]; then
        conda run -n $conda_env salmon quant -i ${genome}_index -l A \
            -1 "../fastq/${group}_${stage}_${replicate}_*_1.fq.gz" \
            -2 "../fastq/${group}_${stage}_${replicate}_*_2.fq.gz" \
            -p 64 -o "${output_dir}" \
            --writeMappings="${output_dir}/${group}_${stage}_${replicate}.salmon.sam" --gcBias
    fi

    cd "${output_dir}"

    if [ ! -f ${group}_${stage}_${replicate}.salmon.bam ]; then
        conda run -n $conda_env samtools sort -O BAM -o ${group}_${stage}_${replicate}.salmon.bam ${group}_${stage}_${replicate}.salmon.sam -@ 64
    fi
    if [ ! -f ${group}_${stage}_${replicate}.tsv ]; then
        echo -e "TxID\tGeneID" > ${group}_${stage}_${replicate}.tsv
        zcat ../../genome/${genome}.cdna.all.fa.gz |
        grep "^>" | 
        cut -f 1,4 -d ' ' | 
        sed -e 's/^>//' -e 's/gene://' -e 's/\.[0-9]*$//' |
        tr ' ' '\t'  >> ${group}_${stage}_${replicate}.tsv
    fi
    if [ ! -f ${group}_${stage}_${replicate}.salmon.sorted.bam ]; then
        conda run -n $conda_env picard AddOrReplaceReadGroups \
            -I ${group}_${stage}_${replicate}.salmon.bam \
            -O ${group}_${stage}_${replicate}.salmon.sorted.bam \
            -RGID ${replicate} \
            -RGLB lib1 \
            -RGPL illumina \
            -RGPU unit1 \
            -RGSM ${group}_${stage}_${replicate} \
            -VALIDATION_STRINGENCY SILENT
    fi
    if [ ! -f ${group}_${stage}_${replicate}.salmon.mkdup.bam ]; then
        conda run -n $conda_env picard MarkDuplicates \
            -I ${group}_${stage}_${replicate}.salmon.sorted.bam \
            -O ${group}_${stage}_${replicate}.salmon.mkdup.bam \
            -M ${group}_${stage}_${replicate}.salmon.mkdup_metrics.txt \
            -CREATE_INDEX true \
            -VALIDATION_STRINGENCY SILENT
    fi
    if [ ! -f ../${genome}_transriptome_refFlat.txt ]; then
        ../../script/create_refflat_from_sam_header.py -b ${group}_${stage}_${replicate}.salmon.sorted.bam -o ../${genome}_transriptome_refFlat.txt
    fi
    if [ ! -f ${group}_${stage}_${replicate}.salmon.mkdup.metrics ]; then
        conda run -n $conda_env picard CollectRnaSeqMetrics \
            -I ${group}_${stage}_${replicate}.salmon.mkdup.bam \
            -O ${group}_${stage}_${replicate}.salmon.mkdup.metrics \
            -REF_FLAT ../${genome}_transriptome_refFlat.txt \
            -STRAND_SPECIFICITY NONE \
            -VALIDATION_STRINGENCY SILENT
    fi
    if [ ! -f ${group}_${stage}_${replicate}.QCReport.html ]; then
        conda run -n $conda_env multiqc . -n ${group}_${stage}_${replicate}.QCReport.html -o .
    fi

    cd ../../
done

for group in "${groups[@]}"; do
    for stage in "${stages[@]}"; do
        replicate_bams=()
        for sample in "${samples[@]}"; do
            sample_group=$(echo "$sample" | cut -d'_' -f1)
            sample_stage=$(echo "$sample" | cut -d'_' -f2)
            sample_replicate=$(echo "$sample" | cut -d'_' -f3)
            if [ "$sample_group" == "$group" ] && [ "$sample_stage" == "$stage" ]; then
                replicate_bams+=("output/${group}_${stage}_${sample_replicate}/${group}_${stage}_${sample_replicate}.salmon.mkdup.bam")
            fi
        done
        if [ "${#replicate_bams[@]}" -gt 0 ]; then
            merged_bam="output/${group}_${stage}_merged.markdup.sorted.bam"
            conda run -n $conda_env samtools merge -@ 64 "$merged_bam" "${replicate_bams[@]}"
            conda run -n $conda_env samtools index -@ 64 "$merged_bam"
        fi
    done
done